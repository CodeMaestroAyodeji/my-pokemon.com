{"version":3,"file":"static/js/985.b3c17abc.chunk.js","mappings":"yOAEqBA,EAAY,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAC/B,SAAAA,EAAYK,GAAQ,IAADC,EAEgB,OAFhBC,EAAAA,EAAAA,GAAA,KAAAP,IACjBM,EAAAH,EAAAK,KAAA,KAAMH,IACDI,MAAQ,CAAEC,UAAU,GAAQJ,CACnC,CAIC,OAJAK,EAAAA,EAAAA,GAAAX,EAAA,EAAAY,IAAA,SAAAC,MAMD,WACE,OAAIC,KAAKL,MAAMC,UAEXK,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0CAAyCC,SAAC,0DAMrDH,KAAKT,MAAMY,QACpB,IAAC,EAAAL,IAAA,2BAAAC,MAdD,SAAgCK,GAC9B,MAAO,CAAER,UAAU,EACrB,KAACV,CAAA,CAR8B,CAASmB,EAAAA,W,UCyB1C,EAvBe,WACb,OACEJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oDAAmDC,UAChEG,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAACC,GAAG,IAAIN,UAAU,eAAcC,UACnCF,EAAAA,EAAAA,KAAA,OAAKQ,IAAI,eAAeC,IAAI,YAE9BT,EAAAA,EAAAA,KAAA,UAAQC,UAAU,iBAAiBS,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmBR,UAC7MF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAElBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA2BU,GAAG,yBAAwBT,UACnEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kCAAiCC,UAE7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUC,UACtBF,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAACC,GAAI,IAAIN,UAAU,mCAAmC,eAAa,OAAMC,SAAC,mBAO7F,ECnBMU,GAAqBC,EAAAA,EAAAA,OAAK,kBAHjBC,EAIP,IAJc,IAAIC,SAAQ,SAACC,GAAO,OAAKC,WAAWD,EAASF,EAAG,KAIxDI,MAAK,kBAAM,sCAA0B,IAJrC,IAACJ,CAIqC,IAG9CK,EAAkB,WAEtB,OAAOnB,EAAAA,EAAAA,KAAA,OAAAE,SAAK,8BACd,EAUA,EAR2B,WACzB,OACEF,EAAAA,EAAAA,KAACoB,EAAAA,SAAQ,CAACC,UAAUrB,EAAAA,EAAAA,KAACmB,EAAe,IAAIjB,UACtCF,EAAAA,EAAAA,KAACY,EAAkB,KAGzB,ECZMU,EAAkBlB,EAAAA,MAAW,kBAAM,6BAA8C,IAsBvF,MApBA,WACE,IAAMmB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACRC,OAAOC,SAAS,EAAG,EACrB,GAAG,CAACJ,EAASK,YAGX5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBG,EAAAA,EAAAA,MAACpB,EAAY,CAAAiB,SAAA,EACXF,EAAAA,EAAAA,KAAC6B,EAAM,KACPxB,EAAAA,EAAAA,MAACyB,EAAAA,GAAM,CAAA5B,SAAA,EACLF,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAASjC,EAAAA,EAAAA,KAACsB,EAAe,OACzCtB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACC,KAAK,eAAeC,SAASjC,EAAAA,EAAAA,KAACkC,EAAkB,aAKjE,C","sources":["components/Others/ErrorHandler.js","components/Navbar/Navbar.js","components/PokemonDetails/DetailsLazyLoading.js","App.js"],"sourcesContent":["import React from 'react';\r\n\r\nexport default class ErrorHandler extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <h1 className=\"alert alert-warning text-center m-5 p-5\">\r\n          Sorry :) Something went wrong. Please reload the page\r\n        </h1>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Navbar.css'; // Import the CSS file for custom styling\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"container navbar navbar-expand-lg bg-body-primary\">\r\n      <div className=\"container\">\r\n        <Link to='/' className=\"navbar-brand\">\r\n          <img src=\"/logo192.png\" alt=\"Logo\" />\r\n        </Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n            {/* Move the \"Home\" link to the right using the \"ms-auto\" class */}\r\n            <li className=\"nav-item\">\r\n              <Link to= '/' className=\"nav-link text-align-right active\" aria-current=\"page\">Home</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { lazy, Suspense } from 'react';\r\n\r\n// Create a function that returns a promise after a 5-second delay\r\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n// Use the lazy function to load PokemonDetails after the delay\r\nconst LazyPokemonDetails = lazy(() =>\r\n  delay(5000).then(() => import('./PokemonDetails'))\r\n);\r\n\r\nconst LoadingFallback = () => {\r\n  // You can customize the loading fallback here\r\n  return <div>Loading Pokemon details...</div>;\r\n};\r\n\r\nconst DetailsLazyLoading = () => {\r\n  return (\r\n    <Suspense fallback={<LoadingFallback />}>\r\n      <LazyPokemonDetails />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default DetailsLazyLoading;\r\n","import React, { useEffect, Suspense } from 'react';\r\nimport { Routes, Route, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\n//import PokemonList from './components/PokemonList/PokemonList';\r\nimport ErrorHandler from './components/Others/ErrorHandler';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport DetailsLazyLoading from './components/PokemonDetails/DetailsLazyLoading';\r\n\r\n// Lazy loading for the components\r\nconst LazyPokemonList = React.lazy(() => import('./components/PokemonList/PokemonList'));\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorHandler>\r\n        <Navbar />\r\n        <Routes>\r\n          <Route path=\"/\" element={<LazyPokemonList />} />\r\n          <Route path=\"/pokemon/:id\" element={<DetailsLazyLoading />} />\r\n        </Routes>\r\n      </ErrorHandler>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["ErrorHandler","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","hasError","_createClass","key","value","this","_jsx","className","children","error","React","_jsxs","Link","to","src","alt","type","id","LazyPokemonDetails","lazy","ms","Promise","resolve","setTimeout","then","LoadingFallback","Suspense","fallback","LazyPokemonList","location","useLocation","useEffect","window","scrollTo","pathname","Navbar","Routes","Route","path","element","DetailsLazyLoading"],"sourceRoot":""}